#!/bin/bash
set -e

#TODO - fix redundant /etc/hosts
#TODO - scale to data2,3...
#TODO - scale to ${ip%\.*}.1,2,3...
#TODO - remove staff ssh keys
#TOTO - alerts directly to monitoring instead of asking users to send an email...
#SEC - what if this script becomes interactive for some reason (like cp -i), will user be able to answer?

store=/data1
nodenum=1

function usage {
	echo
	echo Usage: $0 \<distribution\> \<guest name\> \<ip\>
	echo
        exit 1
}

function bomb {
	echo FAIL $@
	exit 1
}

#pubkey is optional
[[ -z $3 ]] && usage
distro=$1
guest=$2
ip=$3
pubkey="$4"

name=${guest#dnc-}
gw=${ip%\.*}.$nodenum

  [[ $distro = centos ]] && vdisk=$distro.xfs		&& target=$guest.xfs
    [[ $distro = crux ]] && vdisk=$distro.reiser4	&& target=$guest.reiser4
  [[ $distro = buster ]] && vdisk=$distro.ext4		&& target=$guest.ext4
 [[ $distro = netbsd9 ]] && vdisk=$distro.ffs		&& target=$guest.ffs
[[ $distro = sabotage ]] && vdisk=$distro.reiser4	&& target=$guest.reiser4
   [[ $distro = slack ]] && vdisk=$distro.reiser4	&& target=$guest.reiser4
   [[ $distro = focal ]] && vdisk=$distro.ext4		&& target=$guest.ext4

[[ ! -f /data/templates/$vdisk.tar ]] && bomb there is no such distro available: $vdisk.tar

#tpl=...
#tplname=${tpl%%\.*}

[[ -d $store/guests/$guest/ ]] && bomb guest with name $guest already exists
#$store/data/guests/$guest/ already exists

[[ -n `xl list | grep -E "^$guest[[:space:]]" | awk '{print $1}'` ]] && bomb guest with name $guest is already up and running

ping -c1 -W1 $ip >/dev/null 2>&1 && bomb $ip is already alive

#[[ ! -x /root/xen/deployguest.bash ]] \
#        && echo /root/xen/deployguest.bash not executable && exit 1
#[[ ! -x /root/xen/renameguest.bash ]] \
#        && echo /root/xen/renameguest.bash not executable && exit 1

#set -e helps here - as $store/guests/ should already exist
mkdir $store/guests/$guest/
mkdir $store/guests/$guest/lala/

# CWD is /root/ and we're going relative
cd $store/guests/$guest/

#/root/xen/deployguest.bash $tpl
#/root/xen/renameguest.bash $tplname $guest

#echo -n cloning sparse virtual disk...
#cp --sparse=always /data/templates/$vdisk $target && \
#	echo done || bomb

echo -n extracting sparse virtual disk from $vdisk.tar ...
tar xSf /data/templates/$vdisk.tar && echo done

echo -n renaming sparse virtual disk to $target ...
mv $vdisk $target && echo done

#echo -n checking $guest.reiser4...
#fsck.reiser4 -yf --fix --preen $guest.reiser4 >/dev/null 2>&1 && \
#	echo done || bomb
#echo -n mounting REISER4...
#
#mkdir lala/
#mount -o loop,rw $guest.reiser4 lala/ && 
#	echo done || bomb

echo -n mounting $target...
if [[ $distro = netbsd9 ]]; then
        mount -t ufs -o ufstype=44bsd $target lala/ && echo done || bomb
else
	mount -o loop,rw $target lala/ && echo done || bomb

	# THO IT HAS BEEN ADDED INTO THE TEMPLATE ALREADY
	# BEWARE WE ARE ERASING EVERYTHING ONLY BECAUSE THIS IS OUR TEMPLATE ANYWAYS
	echo -n deploying modules...
	mkdir -p lala/lib/modules/
	rm -rf lala/lib/modules/*
	tar xzf /data/kernels/5.2.21.domureiser4.modules.tar.gz -C lala/lib/modules/ && echo done
fi
#for ball in `ls -1 /data/kernels/lib.modules.*.tar.gz`; do
#        echo -n $ball...
#        tar xzf $ball -C lala/lib/modules/ && echo done
#done; unset ball
echo

case $distro in
        focal)		source /root/xen/distro/ubuntu.bash	&& setup-ubuntu ;;
        buster)		source /root/xen/distro/debian.bash	&& setup-debian ;;
        centos)		source /root/xen/distro/centos.bash	&& setup-centos ;;
        slack)		source /root/xen/distro/slackware.bash	&& setup-slackware ;;
        netbsd9)	source /root/xen/distro/netbsd.bash	&& setup-netbsd ;;
        crux)		source /root/xen/distro/crux.bash	&& setup-crux ;;
        sabotage)	source /root/xen/distro/sabotage.bash	&& setup-sabotage ;;
        *)		bomb wrong distro: $distro ;;
esac

#echo -n DISABLING TEMPORARILY TMEM...
#rm -f lala/etc/modules && echo DONE

#echo -n ENABLING/OVERWRITING TMEM...
#echo tmem > lala/etc/modules && echo DONE

echo -n wipe-out host keys...
rm -f lala/etc/ssh/ssh_host_* && echo done || bomb

echo -n fresh ed25519...
ssh-keygen -q -t ed25519 -f lala/etc/ssh/ssh_host_ed25519_key -C "root@$guest" -N "" && echo done || bomb

echo -n authorized keys...
#maybe w/o -p to make sure there's nothing from template?
mkdir -p lala/root/.ssh/
chmod 700 lala/root/.ssh/
cat > lala/root/.ssh/authorized_keys <<EOF && echo done || bomb
$pubkey

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJTdirLiqtdrVX6nJAuRV0H4oqUV2RclQaIyq/McHEHy alex@alex
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMNWddNzcz/4w/B5fWTuMDO1jGyuWJhCn0j0WAD1/Pcf elge@extensa
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM2dwM1ixasJ1a/7iVbRh46ERmOBXjxuCFM4KVdPJqqH alex@france1
EOF
chmod 600 lala/root/.ssh/authorized_keys

echo -n un-mounting...
umount lala/ && echo done || bomb

rmdir lala/

# NETBSD
if [[ $distro = netbsd9 ]]; then
	echo -n netbsd guest configuration...
	cat > $guest <<EOF && echo done
#kernel = "/data/kernels/netbsd9/netbsd-INSTALL_XEN3_DOMU.gz"
kernel = "/data/kernels/netbsd9/netbsd-XEN3_DOMU.gz"
root = "xbd0a"
#extra = "-v -s"
name = "$guest"
memory = 1024
vcpus = 3
maxvcpus = 8
disk = ['tap:tapdisk:aio:$store/guests/$guest/$guest.ffs,xvda,w']
vif = [ 'bridge=br0,vifname=v$name.0',
        'bridge=br0,vifname=v$name.1']
EOF

# LINUCES
else
	echo -n linux guest configuration...
	cat > $guest <<EOF && echo done
kernel = "/data/kernels/5.2.21.domureiser4.vmlinuz"
root = "/dev/xvda1 ro console=hvc0 net.ifnames=0 biosdevname=0 mitigations=off"
name = "$guest"
vcpus = 3
maxvcpus = 8
memory = 7168
disk = ['tap:tapdisk:aio:$store/guests/$guest/$target,xvda1,w']
vif = [ 'bridge=br0, vifname=v$name.0' ]
type = "pvh"
EOF
fi

#absolute path in process list is a nice thing to have
#self-verbose
echo -n starting guest...
xl create $store/guests/$guest/$guest >> /root/deploytpl.log 2>&1 && echo done || bomb

cat <<EOF

 $name is booting

        ping $ip
        ssh $ip -l root

EOF

